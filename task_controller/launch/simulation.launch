<?xml version="1.0"?>
<launch>
  <!-- Trajectory Execution Server -->
  <node name="convert_trajectory_server" pkg="motoman_moveit" type="convert_trajectory_server" output="screen" >
    <param name="simulation_execution_topic" type="string" value="joint_path_command" />
  </node>
  <arg name="speed" default="fast" />
    
  <!-- Vision Code -->
  <include file="$(find apc_vision)/launch/apc_vision.launch">
    <arg name="sim" value="true" />
  </include>

  <include file="$(find constrained_path_generator)/launch/constrained_path_generator.launch" />

  <!-- Grasping and Gripper Cade -->
  <!-- <node ns="left" pkg="gripper_srv" type="SModelTcpNode.py" name="gripper_tcp_node" args="10.0.0.10"/> -->
  <!-- <node ns="right" pkg="gripper_srv" type="SModelTcpNode.py" name="gripper_tcp_node" args="10.0.0.11"/> -->
  <node ns="left" pkg="gripper_srv" type="gripper_controller.py" name="gripper_server" args="left"/>
  <node ns="right" pkg="gripper_srv" type="gripper_controller.py" name="gripper_server" args="right"/>
  <node pkg="grasp_planner" type="online_grasp_server.py" name="online_grasp_server" />
 
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
  <rosparam command="load" file="$(find motoman_sda10f_support)/config/joint_names_sda10f.yaml"/>

  <!-- <rosparam param="/move_group/trajectory_execution/execution_duration_monitoring">true</rosparam>   -->

  <include file="$(find motoman_sda10f_moveit_config)/launch/move_group.launch">
    <arg name="load_robot_description" value="true" />
    <arg name="joint_limits"
         value="$(find motoman_sda10f_moveit_config)/config/joint_limits_$(arg speed).yaml" />
    <arg name="publish_monitored_planning_scene" value="true" />
    <arg name="fake_execution" value="true"/>
  </include>

  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip and controller(fs100|dx100) arguments is required -->
  <arg name="sim" default="true" />
  <arg name="robot_ip" unless="$(arg sim)" />
  <arg name="controller" unless="$(arg sim)" />
  <arg name="version0" unless="$(arg sim)" />
 
  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find motoman_sda10f_moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_7_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find motoman_sda10f_support)/launch/robot_interface_streaming_sda10f.launch" >
      <arg name="robot_ip" default="10.0.0.2" />
      <arg name="controller" default="fs100" />
      <arg name="version0" default="false" />
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <!-- RViz -->
  <include file="$(find motoman_sda10f_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>
  
  <node pkg="trajlib" type="trajectory_server.py" name="trajectory_server" />
  <node pkg="trajectory_verifier" type="trajectory_verifier_node" name="trajectory_verifier" output="screen"/>

  <rosparam command="load" file="$(find task_controller)/cfg/items.yaml" />
  <node pkg="apc_util" type="publish_pointcloud_collision_server" name="publish_pointcloud_collision_server" />

  <!-- Environment models -->
  <rosparam command="load" file="$(find task_controller)/cfg/shelf.yaml" />
  <rosparam command="load" file="$(find task_controller)/cfg/shelf_collision.yaml" />
  <node pkg="apc_util" type="publish_shelf_tf.py" name="publish_shelf_tf" />
  <node pkg="apc_util" type="publish_lab.py" name="publish_lab" />
  <node pkg="apc_util" type="publish_checkerboard.py" name="publish_checkerboard" />


  <node pkg="task_controller" type="motoman_controller.py" name="motoman_controller" output="screen"/>
</launch>
